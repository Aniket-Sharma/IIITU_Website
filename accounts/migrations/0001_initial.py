# Generated by Django 2.1.4 on 2019-04-04 22:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'student'), (2, 'company'), (3, 'admin')], default=1, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_logo', models.ImageField(upload_to='company_logos/')),
                ('location', models.TextField()),
                ('alternate_email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=12)),
                ('alternate_phone', models.CharField(max_length=12)),
                ('website', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('purpose', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='OfferedPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package_offered', models.PositiveSmallIntegerField()),
                ('company_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Placement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placed_thru', models.CharField(choices=[(1, 'On Campus Placement'), (2, 'Off Campus Placement')], max_length=100)),
                ('package', models.PositiveSmallIntegerField()),
                ('company_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_pic', models.ImageField(upload_to='student_profile_pics/')),
                ('email', models.EmailField(max_length=254)),
                ('alternate_email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=12)),
                ('alternate_phone', models.CharField(max_length=12)),
                ('is_tpr', models.BooleanField(default=False, verbose_name='TPR Status : Check if User is an TPR')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyUser',
            fields=[
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('accounts.user', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentUser',
            fields=[
                ('roll_no', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('sem', models.PositiveSmallIntegerField()),
                ('branch', models.CharField(max_length=100)),
                ('batch', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('accounts.user', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='studentuser',
            name='user',
            field=models.OneToOneField(on_delete=None, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='roll_no',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.StudentUser'),
        ),
        migrations.AddField(
            model_name='placement',
            name='roll_no',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.StudentUser'),
        ),
        migrations.AddField(
            model_name='offeredplacement',
            name='roll_no',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.StudentUser'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='company',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.CompanyUser'),
        ),
    ]
